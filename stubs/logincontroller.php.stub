<?php

namespace App\Http\Controllers\Auth;

use App\User;
use Carbon\Carbon;
use App\LoginToken;
use Illuminate\Http\Request;
use App\Mail\UserLoginTokenEmail;
use App\Handlers\Login\LoginHandler;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Mail;
use App\Providers\RouteServiceProvider;
use Illuminate\Support\Facades\Session;
use Illuminate\Foundation\Auth\AuthenticatesUsers;

class LoginController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Login Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles authenticating users for the application and
    | redirecting them to your home screen. The controller uses a trait
    | to conveniently provide its functionality to your applications.
    |
    */

    use AuthenticatesUsers;

    /**
     * Where to redirect users after login.
     *
     * @var string
     */
    protected $redirectTo = '/dashboard';

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest')->except('logout');
    }

    public function login(Request $request, LoginHandler $loginToken)
    {
        $user = User::where('email', $request->email)->first();
       
        if (isset($user->email)) {
            $token = $loginToken->createUserAccessToken($user->email, $user->id);
        }

        if (isset($token)) {
            $url = env('APP_URL') . '/login/' . $token->token;
            info("web login url: $url");
            Mail::to($user->email)
                ->send(new UserLoginTokenEmail($user, $url));

            return response()->json(['success' => true]);
        }

        return response()->json(['success' => false]);
    }

    public function acceptEmailToken($token)
    {
        $loginToken = LoginToken::where('token', $token)->first();

        if (!$loginToken || $loginToken->is_valid == false) {
            Session::flash('message', 'The login link you have used has expired, please request a new one.');
            Session::flash('color', 'var(--danger)');
            return redirect('/login');
        }

        $user = User::findOrFail($loginToken->user_id);
        $lastLogin = $user->last_login_at;
        auth()->login($user);

        $user->update([
            'last_login_at' => Carbon::now()->toDateTimeString(),
        ]);

        if ($loginToken->user_id != 1 && $loginToken->user_id != 2) {
            $loginToken->delete();
        }

        if (!$lastLogin) {
            if (
                $user->onboardingReference
                && $user->onboardingReference->landing_page === 'webinar_ad'
            ) {
                return redirect('/landing/webinar');
            }
            return redirect('/dashboard');
        }

        return redirect('/dashboard');
    }
}
